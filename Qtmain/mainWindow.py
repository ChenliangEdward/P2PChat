# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sqlite3
import time
import datetime
from mainFuncs import *
from query_server import *
import json


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 624)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.sendMessage = QtWidgets.QPushButton(self.centralwidget)
        self.sendMessage.setGeometry(QtCore.QRect(660, 510, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(11)
        self.sendMessage.setFont(font)
        self.sendMessage.setObjectName("sendMessage")
        self.messageLabel = QtWidgets.QLabel(self.centralwidget)
        self.messageLabel.setGeometry(QtCore.QRect(450, 30, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(19)
        self.messageLabel.setFont(font)
        self.messageLabel.setObjectName("messageLabel")
        self.messageDetail = QtWidgets.QTextBrowser(self.centralwidget)
        self.messageDetail.setGeometry(QtCore.QRect(270, 70, 491, 311))
        self.messageDetail.setObjectName("messageDetail")
        self.messageInputBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.messageInputBox.setGeometry(QtCore.QRect(270, 430, 491, 71))
        self.messageInputBox.setObjectName("messageInputBox")
        self.friendLabel = QtWidgets.QLabel(self.centralwidget)
        self.friendLabel.setGeometry(QtCore.QRect(40, 40, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.friendLabel.setFont(font)
        self.friendLabel.setObjectName("friendLabel")
        self.friendList = QtWidgets.QListWidget(self.centralwidget)
        self.friendList.setGeometry(QtCore.QRect(20, 70, 171, 311))
        self.friendList.setObjectName("friendList")
        self.userSearchBox = QtWidgets.QTextEdit(self.centralwidget)
        self.userSearchBox.setGeometry(QtCore.QRect(20, 431, 171, 31))
        self.userSearchBox.setObjectName("userSearchBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 410, 71, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(190, 60, 81, 441))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.statusBox = QtWidgets.QComboBox(self.centralwidget)
        self.statusBox.setGeometry(QtCore.QRect(90, 10, 101, 22))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.statusBox.setFont(font)
        self.statusBox.setObjectName("statusBox")
        self.statusBox.addItem("")
        self.statusBox.addItem("")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.RefreshMessage = QtWidgets.QPushButton(self.centralwidget)
        self.RefreshMessage.setGeometry(QtCore.QRect(550, 510, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(11)
        self.RefreshMessage.setFont(font)
        self.RefreshMessage.setObjectName("RefreshMessage")
        self.signInInput = QtWidgets.QTextEdit(self.centralwidget)
        self.signInInput.setGeometry(QtCore.QRect(20, 500, 171, 31))
        self.signInInput.setObjectName("signInInput")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(260, 400, 511, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.searchandadd = QtWidgets.QPushButton(self.centralwidget)
        self.searchandadd.setGeometry(QtCore.QRect(20, 470, 171, 23))
        self.searchandadd.setObjectName("searchandadd")
        self.signIn = QtWidgets.QPushButton(self.centralwidget)
        self.signIn.setGeometry(QtCore.QRect(20, 540, 171, 23))
        self.signIn.setObjectName("signIn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # I added the following
        # self.start_server()
        self.updateFriendList()
        self.friendList.itemClicked.connect(self.displayMessage)
        self.sendMessage.clicked.connect(self.sendMessageTo)
        self.statusBox.currentIndexChanged.connect(self.offlineOrOnline)
        self.RefreshMessage.clicked.connect(self.displayMessage)
        self.signIn.clicked.connect(self.signInFunc)
        self.searchandadd.clicked.connect(self.searchAndAddFunc)
        self.run()

    # def closeEvent(self):

    def __init__(self):
        self.con = sqlite3.connect("main.db", check_same_thread=False)
        self.cur = self.con.cursor()
        self.userIPMapping = {}
        self.IPUserMapping = {}

        SERVER = socket.gethostbyname(socket.gethostname())
        PORT = 5050
        self.HEADER = 64
        self.ADDR = (SERVER, PORT)
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind(self.ADDR)
        self.debug_mode = True
        self.msgBuff = ""

        self.centralServerIP = ""

    def searchAndAddFunc(self):
        if self.userSearchBox.toPlainText() == "":
            return
        username = self.userSearchBox.toPlainText()
        # Query the central server
        friend_ip = user_Get(username)
        print(username)

        if friend_ip == "No such user found!":
            print("No such User found!")
            return
        else:
            # add username ip mapping to DB
            ip = json.loads(friend_ip)["ip"]
            self.cur.execute(f"INSERT INTO friends VALUES ('{username}','{ip}')")
            self.con.commit()
            print("Get to DB successfully")
        self.updateFriendList()

    def signInFunc(self):
        if self.signInInput.toPlainText() == "":
            return
        ip = self.ADDR[0]
        username = self.signInInput.toPlainText()
        if user_Get(username) != ip:
            user_Patch(username, ip)
        else:
            user_Post(username, ip)

    def __handle_client(self, conn, addr):
        if self.debug_mode:
            print(f"[NEW CONNECTION] {addr[0]} connected.")

        msg_length = conn.recv(self.HEADER).decode("utf-8")
        if msg_length:
            msg_length = int(msg_length)
            msg = conn.recv(msg_length).decode("utf-8")
            # Get to DB
            timestamp = str(int(time.time()))
            username = self.IPUserMapping[str(addr[0])]
            _con = sqlite3.connect("main.db")
            _cur = _con.cursor()
            _cur.execute(f"INSERT INTO messages VALUES ('{timestamp}','{username}','In','{str(msg)}')")
            _con.commit()
            _con.close()
            print("message recorded")

            # Show the msg
            # self.displayMessage()
            if self.debug_mode:
                print(f"[{addr}]{msg}")
        conn.close()

    def send(self, target_ip, target_port, msg):
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((target_ip, target_port))

        message = msg.encode("utf-8")
        msg_length = len(message)
        send_length = str(msg_length).encode("utf-8")
        send_length += b' ' * (self.HEADER - len(send_length))
        client.send(send_length)
        client.send(message)

    def start_server(self):
        self.server.listen()
        if self.debug_mode:
            print("Server is listening in start_server()")
        while True:
            conn, addr = self.server.accept()  # start a socket object when a new connection starts
            self.__handle_client(conn, addr)

    def stop_server(self):
        self.server.close()

    def run(self):
        print("Start Listening...")
        server_thread = threading.Thread(target=self.start_server, args=())
        server_thread.name = "server_thread"
        server_thread.start()

    def done(self):
        print("Killing a Thread")

    # below are the interfaces that can be called by the GUI

    def displayMessage(self):
        try:
            name = self.friendList.currentItem().text()
        except:
            return
        print(name)
        allMsg = ""
        if name == "":
            return
        # get all msg related to the selected person
        for row in self.cur.execute(f'''SELECT * FROM messages WHERE user='{name}' ORDER BY timestamp '''):
            sender = "Me" if row[2] == "Out" else row[1]
            at = str(datetime.datetime.fromtimestamp(int(row[0])))
            content = row[3]
            curMsg = f"\n{at}\n{sender}:\n{content}\n"
            allMsg = allMsg + curMsg
        # display the message within the message box:
        self.messageDetail.clear()
        self.messageDetail.append(allMsg)

    def updateFriendList(self):
        # update the Friendlist from Database, clear the list first and re-add them.
        self.friendList.clear()
        self.userIPMapping = {}
        for row in self.cur.execute('SELECT * FROM friends'):
            print(row)
            self.friendList.addItem(row[0])
            self.userIPMapping[row[0]] = row[1]
            self.IPUserMapping[row[1]] = row[0]
        # print(self.userIPMapping)

    def sendMessageTo(self):
        msg = self.messageInputBox.toPlainText()
        target_name = self.friendList.currentItem().text()
        target_ip = self.userIPMapping[target_name]
        target_port = 5051  # the target port is due to change
        try:
            self.send(target_ip, target_port, msg)
        except:
            print("The friend is offline!")
            return
        # Get to Database
        timestamp = str(int(time.time()))
        self.cur.execute(f"INSERT INTO messages VALUES ('{timestamp}','{target_name}','Out','{msg}')")
        self.con.commit()
        self.displayMessage()

    def offlineOrOnline(self):
        if self.statusBox.currentText() == "Online":
            self.start_server()
            if self.debug_mode:
                print("Server Started")
        else:
            self.stop_server()
            if self.debug_mode:
                print("Server Stopped")

    def show_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Sign Up")
        msg.setIcon(QMessageBox.Question)
        msg.setText("You have not signed up!")

        _ = msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.sendMessage.setText(_translate("MainWindow", "Send"))
        self.messageLabel.setText(_translate("MainWindow", "Messages"))
        self.friendLabel.setText(_translate("MainWindow", "Friends"))
        self.label.setText(_translate("MainWindow", "Username:"))
        self.statusBox.setCurrentText(_translate("MainWindow", "Online"))
        self.statusBox.setItemText(0, _translate("MainWindow", "Online"))
        self.statusBox.setItemText(1, _translate("MainWindow", "Offline"))
        self.label_2.setText(_translate("MainWindow", "My Status:"))
        self.RefreshMessage.setText(_translate("MainWindow", "Refresh"))
        self.searchandadd.setText(_translate("MainWindow", "Search and Add"))
        self.signIn.setText(_translate("MainWindow", "Sign In"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
